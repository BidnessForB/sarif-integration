name: LW Inline Scan
# TODO: Leverage Terraform backend maintenance of state file (https://www.terraform.io/docs/language/settings/backends/s3.html)
# Controls when the action will run. 
on:
  repository_dispatch:
    types: [scan]
  workflow_dispatch:
  pull_request:
    branches: [main]
    paths:
      - 'Dockerfile'
  push:
    branches: [main]
    paths:
      - 'Dockerfile'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  BuildAndScan:
    runs-on: ubuntu-latest
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout action code
        uses: actions/checkout@v2

      - name: Build transform action
        run: | 
          npm ci
          npm run build

      - name: Build the latest Docker image
        run: docker build . -t bryancross:test-image
  
      - name: Download lw-scanner
        run: |
          sudo curl -LJO https://github.com/lacework/lacework-vulnerability-scanner/releases/download/v0.1.2/lw-scanner-linux-amd64
          sudo mv lw-scanner-linux-amd64 lw-scanner
          sudo chmod +x lw-scanner

      - name: Scan image
        run: | 
          printf ".\ntrue\nfalse" | ./lw-scanner config data
          ./lw-scanner image evaluate bryancross test-image -t ${{ secrets.LW_ACCESS_TOKEN }} -n ${{ secrets.LW_ACCOUNT_NAME }} 

      - name: Transform results to SARIF
        run: | 
          npm run convert -- -s $(find . -type f -name 'evaluation*') 

      - name: Persist the output SARIF file
        uses: actions/upload-artifact@v2
        with:
          name: sarif-output-file
          path: ./report.sarif.json

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v1
        with:
          # Path to SARIF file relative to the root of the repository
          # sarif_file: ./SARIF-examples/SARIF-minimal.sarif.json
          #sarif_file: ./SARIF-examples/SARIF-complete.sarif.json
          sarif_file: ./report.sarif.json

      - name: Check for vulnerabilities
        id: vuln-check
        run: | 
          export VULNS=$(jq .high_vulnerabilities $(find . -type f -name 'evaluation*'))
          echo ::set-output name=vulns::$VULNS
          echo VULNS
          echo $VULNS

      - name: Output results to workflow console
        if: ${{ steps.vuln-check.outputs.vulns > 0 }}
        run: | 
          echo "Build failed: Lacework found High Severity vulnerabilities"
          echo "Details: " $VULNS " critical/high vulnerabilities detected."
          #This seems to be the only way to get the JQ output pretty printed
          jq -f message.jq $(find . -type f -name 'evaluation*') 

      #Make this configurable
      - name: Fail if high severity vulnerabilities found
        if: ${{ steps.vuln-check.outputs.vulns > 0 }}
        uses: actions/github-script@v3
        with:
          script: | 
            core.setFailed("Critical/High vulnerabilities found!")          

